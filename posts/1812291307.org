#+TITLE: blog redux
#+AUTHOR: angus zhang
#+DATE: 2018-12-29T13:07:33CST
#+TAGS: blog node url domain

* 前传

说起来这是鄙人的第四个博客了.

前三个都是跑起来之后就没有然后了。。

第一个是是用的 ~Github Pages~ + ~Jekyll~ 看着别人教程搭建的。

第二个同第一个，只是生成器改成了 ~Hexo~;

第三个和这个博客思路是一致的，只不过后端用的 ~Java~ + ~MySql~ ，太重了，所以这次用的 ~node~ + ~Mongodb~ ，其实咯，感觉凭可预见的这点文章数量，连 ~MongoDB~ 都不必用，直接存在变量中都是OK的。

* 理想的工作流
** why not ~Jekyll~ or ~Hexo~

为什么淘汰了用 jekyll 抑或 hexo 生成静态博客呢，其实它们也未尝不方便，写完一篇文章 =build= 一下，再推送到 github 就好了，还省却了域名和主机的开销。

但是，每次都要 build 依然让我觉得恐慌。而且，想要高度定制，需要费心去研究 hexo ，习得的知识又不通用，回报和学习成本不匹配。

还有我想用 org-mode，Hexo 上面倒是找到过一个 plugin，但已停止维护。

** then what

写博客，我能想到的最精简最方便的工作流是： =本地编辑 -> 有选择的推送= ，其它的的工作都应交由机器完成

如此，
1. 本地写文章
2. 用 git 推送到 Github
3. 用单独的主机从 Github 拉取和展示文章

成了不二的实现。
而且天然的有以下加成

1. 本地云端双备份
2. 版本控制
3. 坐拥 Github 网页端编辑功能

** org-mode 渲染

不像 markdown 通用，有现成的方案支援，所以需要花些心思，我的第三个博客用的Java，就找不到一个很好的 parser，期间还想过在服务器装 Emacs，然后用Java和命令行交互，控制 Emacs 帮忙渲染从 Github 拉取过来的 org-mode 源文件，不过没弄好，好在 Github 会渲染 org-mode，索性直接拉取的渲染好的版本。

这次改用 node，发现 mooz 巨巨有写过一个 [[https://github.com/mooz/org-js/][parser]] ，就拿来用了。

*** parser issues
- double =\n\n= denote a <p> even after a heading

* TODO SPA
* 域名

从 namecheap.com 购入 =nichijou.city= (/Nichijou/ 和 /City/ 都是 [[https://twitter.com/himaraya][あらゐけいいち]] 老师作品)

* URL 设计

直接用文章标题作 URL 的话带来的问题是将来可能会变，所以用日期做固定ID，我又不喜一串长长的数字，就在前端编码成了36进制 ~i.toString(36).toUpperCase()~ ；

所以 URL 形似： ~nichijou.city/posts/TYVU3V~

当然这种冷冰冰的字符对 SEO 极不友好，故而采用 medium.com 的策略， =title + id= ，title 并不影响 routing

最终 URL 形如： ~nichijou.city/posts/TYVU3V-robot-from-google-fancy-me~

* TODO 标签索引
* 图床

网站流量可怜，暂且用 Github，和文章放在一起管理起来方便，文件名不变，将来迁移起来也容易

Hammerspoon 黏图脚本
#+BEGIN_SRC lua
  function saveImgToStatic()
    local filename = '/Users/nichijou/Documents/blog/static/' .. os.date('%y%m%d%H%M%S') .. '.png'
    local img = hs.pasteboard.readImage()

    if img == nil then
      hs.alert('no image on pasteboard')
      return
    end

    local res = img:saveToFile(filename)
    if not res then
      hs.alert('failed to save')
    else
      hs.pasteboard.setContents('[[' .. filename .. '][]]')
    end
  end
#+END_SRC
