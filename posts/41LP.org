#+TITLE: about this blog
#+AUTHOR: angus zhang
#+DATE: 2019-01-31T20:35:28CST
#+TAGS: blog node spa url domain recommend

* 前传

说起来这是鄙人的第四个博客了。

前三个都是跑起来之后就没有然后了。。

第一个是是用的 ~Github Pages~ + ~Jekyll~ 看着别人教程搭建的。

第二个同第一个，只是生成器改成了 ~Hexo~;

第二个之前其实还跑过一个 dokuwiki，说起来算是目前走的最远的。而且依赖也不重，它数据是存成txt的，所以不需有数据库，只一个php就行了。忘了因为什么不玩了，现在看依然很喜欢。

第三个和这个博客思路是一致的，只不过后端用的 ~Java~ + ~MySql~ ，太重了，所以这次用的 ~node~ + ~Mongodb~ ，其实咯，感觉凭可预见的这点文章数量，连 ~MongoDB~ 都不必用，直接存在变量中都是OK的。

* Why not ~Jekyll~ or ~Hexo~

为什么不用 jekyll 抑或 hexo 生成静态博客呢，其实它们也未尝不方便，写完一篇文章 =build= 一下，再推送到 github 就好了，还省却了域名和主机的开销。

但是，本人太懒，每次都要 build 依然让我觉得烦躁。虽说有些代码托管站支持 hexo/jekyll 的自动 build，甚至可以借助CI工具。但我觉得都不如自己写个小软件来得 flexible

另外，想要高度定制，需要费心去研究 hexo/jekyll ，习得的知识又不通用，回报和学习成本不匹配。

还有我想用 org-mode，Hexo 上面倒是找到过一个 plugin，但已停止维护。

* 理想的工作流

写博客，我能想到的最精简最方便的工作流是： =本地编辑 ➡ 推送= ，其它的的工作都应交由机器完成

如此，
1. 本地写文章
2. 用 git 推送到 Github
3. 用单独的主机从 Github 拉取和展示文章

成了不二的实现。
而且天然的有以下加成

1. 本地云端双备份
2. 版本控制
3. 坐拥 Github 网页端编辑功能

* org-mode 渲染

org-mode 不似 markdown 通用，有多数软件默认支援，所以需要花些心思，我的第三个博客用的 Java，就找不到一个很好的 parser，期间还想过在服务器装 Emacs，然后用Java和命令行交互，控制 Emacs 帮忙渲染从 Github 拉取过来的 org-mode 源文件，不过没弄好，好在 Github 会渲染 org-mode，索性直接拉取的渲染好的版本。

这次改用 node，发现 mooz 巨巨有写过一个 [[https://github.com/mooz/org-js/][parser]] ，就拿来用了。

** parser issues

- =\n\n= denote a <p> even after a heading
- in ==<code>== / ~~<code>~~ , <code> starting or ending with '/" cannot parse correctly
- no footnote support
- no support for [[https://orgmode.org/manual/Quoting-HTML-tags.html][Quoting HTML tags]]

* SPA

单页应用交互体验棒，响应迅速，但实现起来要复杂一些，好在博客本身复杂度不高。

这里罗列一下用到的 =History API= 。

#+BEGIN_SRC js
// origin
// nichijou.city/post/hello-world#section-2

history.pushState(null, null, '') // do nothing

history.pushState(null, null, '#section-4') // change hash
// nichijou.city/post/hello-world#section-4

history.pushState(null, null, ' ') // remove hash
// nichijou.city/post/hello-world

history.pushState(null, null, 'bye-word') // change last part of path
// nichijou.city/post/bye-world

history.pushState(null, null, '/notes') // change the whole path
// nichijou.city/notes
#+END_SRC


=history.replaceState= 方法顾名思义，替换当前，被替换的部分丢失，所以想不保留历史时用该方法。

History API 仅限于当前 domain，即 SPA 没办法不经浏览器跳转就进入 subdomain ，bummer。

当然还要把浏览器前进后退的行为交给 js 来处理
#+BEGIN_SRC js
window.onpopstate = () => {
  route() // your route method, browser will change the address bar for you
}
#+END_SRC

** SEO

从 [[https://www.youtube.com/watch?v=RAhYnK0v3rk][Server-side Rendering]] 了解到 google '部分'支持js，但用的是chrome41(视频时间2017-11-17)，我的博客用了 Promise, fetch API 等，暂时未做 polyfill，所以只能被google索引到一个首页🙄

可以用 =fetch as google= 测试你需要js渲染的网页能否被 Google 正确爬取。

** ref

1. [[https://medium.com/frontend-fun/js-vanilla-script-spa-1b29b43ea475][Js: Vanilla SPA – Frontend Fun – Medium]]
2. [[https://stackoverflow.com/questions/1397329/how-to-remove-the-hash-from-window-location-url-with-javascript-without-page-r][How to remove the hash from window.location (URL) with JavaScript without page refresh? - Stack Overflow]]
3. [[https://medium.com/@l.mugnaini/spa-and-seo-is-googlebot-able-to-render-a-single-page-application-1f74e706ab11][SPA and SEO: Google (Googlebot) properly renders Single Page Application and execute Ajax calls]]
* Domain

从 namecheap.com 购入 =nichijou.city= (/Nichijou/ 和 /City/ 都是 [[https://twitter.com/himaraya][あらゐけいいち]] 老师作品)

* 文章 URL/Permalink 设计
** ID

大多数 practice 直接用文章标题作 URL ， 带来的问题是将来可能会变，所以需要一个不变的ID。

medium 好像是生成的md5(d87199a18bed)，这种适合有大量数据作区分使用，我没必要使用这种又长又隐晦的ID。

想到两种思路，计数递增 和 创建日期
*** 计数递增

stackoverflow 应该是用的这种：
#+BEGIN_EXAMPLE
webmasters.stackexchange.com/questions/49781/benefit-of-date-in-url-segments
#+END_EXAMPLE

优点：
- 是能做到最短id的方式
- 自带统计属性
- 不连续的 ID 能 indicate 删除过的文章，不过诱惑不大，我又不会舍得真删文章，顶多 archive
- 酷，嗯，短数字ID确实很酷呢，比如 250bpm.com/blog:138，www.soimort.org/mst/9

*** 创建日期

用日期一来可以保证 unique(毕竟只有我一个人在发文，不会出现冲突)，二是将ID(创建日期)用作文件名，在文件内容里就不需再记录该字段了。

我倾向于这种

** 日期

既然决定用创建日期作ID，在 URL 显示日期也就顺理成章。不过真的适合么？

一般时效性强的文章，比如新闻网站都会在 URL 放日期，对读者也很有参考价值。

不过我的文章打算更新，又不是时效性很强的内容，况且日期又可以放在页面内，所以我决定不在 URL 里强调创建日期。

*** 日期 ID 压缩

要把日期作为ID放在 URL，又不想在 URL 展示日期，只能 encode 一下了，况且我本来就嫌它长，早就想压它一压。

思路是：

YY/mm/dd/HH

表示成 YY/DDD/HH，可以省略一位

表示成 YY/HHHH(hour of year)，则又可以省略一位，剩六位

再转成 36 进制(999999.toString(36) = lflr)，最多只有四位，基本满意

题外话，javascript的日期 API 真是可怜。

#+BEGIN_SRC js
let date = '18123017' // 2018-12-30T17:00:00
date = encodeDate(date)
console.log(date) // 41MH
date = decodeDate(date)
console.log(date) // 18123017

function slapZero(num, length) {
  return '0'.repeat(length - num.toString().length) + num
}

function encodeDate(str) {
  const [year, month, day, hour] = str.match(/\d{2}/g)
  const date = new Date('20' + year, month - 1, day, hour)
  let startOfDate = new Date(date.getFullYear(), 0)
  let dayOfYear = Math.floor((date - startOfDate)/ (1000 * 60 * 60 * 24))
  return parseInt(year + slapZero((dayOfYear * 24 + date.getHours()).toString(), 4)).toString(36).toUpperCase()
}

function decodeDate(str) {
  let date = parseInt(str, 36).toString()
  let [, year, hours] = date.match(/(\d{2})(\d{4})/)
  let days = Math.floor(hours / 24)
  date = new Date((days * 24 * 60 * 60 * 1000) + (new Date('20' + year, 0) - 0))
  return year+ slapZero(date.getMonth() + 1, 2) + slapZero(date.getDate(), 2) + slapZero((hours % 24), 2)
}
#+END_SRC
** 位置

当然这种冷冰冰的字符对 SEO 不友好，所以采用 =title + id= 的组合，title 不影响 routing

#+BEGIN_EXAMPLE
nichijou.city/post/set-global-variable-locally-41N5 ✗ 乱作一团
nichijou.city/post/41N5-set-global-variable-locally ✗ 乱作一团
nichijou.city/post/set-global-variable-locally/41N5 ✗ 重要的ID放最后，不妥
nichijou.city/post/41N5:set-global-variable-locally ✗ cute 但是有些乱作一团
nichijou.city/post/41N5/set-global-variable-locally ✓ not bad
#+END_EXAMPLE

最终形式： =nichijou.city/post/41N5[/.*]=

而且谷歌搜索结果可以省略ID部分，尚不知如何实现。

[[../static/190106233349.png][omission of id in Google Search]]

** ref

1. ! [[https://indieweb.org/URL_design][URL design - IndieWeb]]
2. [[https://searchengineland.com/four-reasons-to-avoid-using-dates-in-urls-13152][Four Reasons To Avoid Using Dates In URLs - Search Engine Land]]
3. [[http://www.seobook.com/do-you-put-dates-your-urls][Do You Put Dates in Your URLs? | SEO Book]]
4. [[https://moz.com/community/q/date-in-the-url][Date in the URL | Moz Q&A | Moz]]
5. [[https://moz.com/community/q/blog-article-url-with-or-without-date][Blog article URL - with or without date? | Moz Q&A | Moz]]
6. [[https://www.searchenginenews.com/sample/content/should-i-remove-the-dates-in-my-blog-urls-yes][Should I Remove the Dates in my Blog URLs? Yes! · SearchEngineNews.com]]
* TODO view counter | 访问统计

动态博客想统计访问量不难，
但是我想让应用 disposable，所以访问量不想储存在服务器。
一种方案是定期push到github，但强停应用仍会丢失部分数据。
#+BEGIN_EXAMPLE
    push   push   push
     ↑      ↑      ↑ 
─────┴──────┴──────┴───x <- crash
                   └─┬─┘
                 lost data
#+END_EXAMPLE

既然要使用google analysis，不如直接用它作view counter

不过：
#+BEGIN_QUOTE
Google doesn't process data instantly, you'd need to subscribe to the realtime analytics and cache
the data to display live on your site.
-- [[https://www.quora.com/Can-I-use-Google-Analytics-as-a-public-page-view-counter][Can I use Google Analytics as a public page view counter? - Quora]]
#+END_QUOTE

数据会有一定的滞后性，但不觉得这是个问题。
#+BEGIN_EXAMPLE
─────┬──────┬──────┬───  :Google Analysis
     ↓pull  ↓pull  ↓pull   
     •      •      •     :My Server
     └──┐   └────┐
       request  request  :Users
     └┬─┘   └┬───┘
     delay  delay
#+END_EXAMPLE
* TODO 标签索引
* TODO 评论系统

暂时打算用 [[https://gitalk.github.io/][Gitalk Demo | Aotu.io「凹凸实验室」]]
* 代码高亮

在 [[http://mooz.github.io/org-js/][org.js]] 看到 js 代码有高亮，还以为 org-js 能分析 js 代码块，结果也是在前端挂的 js 库

貌似最通用的两个库是 highlight.js 和 Prism.js，后者貌似多了插件支持，选用的后者。

为了速度，我把Prism挂在后端，发现不能识别  =&#39;=  =&#34;= 等[see: [[https://www.w3.org/MarkUp/html-spec/html-spec_13.html][The HTML Coded Character Set]]]。所以加了几个 replace 操作

#+BEGIN_SRC js
html.replace(/<code class="language-(.+)">([\s\S]*?)<\/code>/g, (match, lang, code) => {
    try {
      code = code
        .replace(/&#34;/g, '"')
        .replace(/&#38;/g, "&")
        .replace(/&#39;/g, "'")
        .replace(/&#60;/g, "<")
        .replace(/&#62;/g, ">")

      return `<code class="language-${lang}">${Prism.highlight(code, Prism.languages[lang], lang)}<\/code>`
    } catch(e) {
      console.log('未添加对 ' + lang + " 支持")
    }
    return match
  })
#+END_SRC
* 图床

网站流量可怜，暂且用 Github，和文章放在一起管理起来方便，文件名不变，将来迁移起来也容易

Hammerspoon 黏图脚本
#+BEGIN_SRC lua
function saveImgToStatic()
  local filename = os.date('%y%m%d%H%M%S') .. '.png'
  local img = hs.pasteboard.readImage()

  if img == nil then return hs.alert('no image on pasteboard') end

  local res = img:saveToFile('/Users/nichijou/Documents/blog/static/' .. filename)

  if not res then
    hs.alert('failed')
  else
    hs.pasteboard.setContents('[[../static/' .. filename .. '][]]')
  end
end
#+END_SRC
