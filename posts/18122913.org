#+TITLE: about this blog
#+AUTHOR: angus zhang
#+DATE: 2018-12-29T13:07:33CST
#+TAGS: blog node url domain ˗ˏˋrecommendˎˊ

* 前传

说起来这是鄙人的第四个博客了.

前三个都是跑起来之后就没有然后了。。

第一个是是用的 ~Github Pages~ + ~Jekyll~ 看着别人教程搭建的。

第二个同第一个，只是生成器改成了 ~Hexo~;

第三个和这个博客思路是一致的，只不过后端用的 ~Java~ + ~MySql~ ，太重了，所以这次用的 ~node~ + ~Mongodb~ ，其实咯，感觉凭可预见的这点文章数量，连 ~MongoDB~ 都不必用，直接存在变量中都是OK的。
* why not ~Jekyll~ or ~Hexo~

为什么不用 jekyll 抑或 hexo 生成静态博客呢，其实它们也未尝不方便，写完一篇文章 =build= 一下，再推送到 github 就好了，还省却了域名和主机的开销。

但是，本人太懒，每次都要 build 依然让我觉得烦躁。虽说有些代码托管站支持 hexo/jekyll 的自动 build，甚至可以借助CI工具。但我觉得都不如自己写个小软件来得 flexible

另外，想要高度定制，需要费心去研究 hexo/jekyll ，习得的知识又不通用，回报和学习成本不匹配。

还有我想用 org-mode，Hexo 上面倒是找到过一个 plugin，但已停止维护。

* 理想的工作流

写博客，我能想到的最精简最方便的工作流是： =本地编辑 ➡ 推送= ，其它的的工作都应交由机器完成

如此，
1. 本地写文章
2. 用 git 推送到 Github
3. 用单独的主机从 Github 拉取和展示文章

成了不二的实现。
而且天然的有以下加成

1. 本地云端双备份
2. 版本控制
3. 坐拥 Github 网页端编辑功能

* org-mode 渲染

org-mode 不似 markdown 通用，有多数软件默认支援，所以需要花些心思，我的第三个博客用的 Java，就找不到一个很好的 parser，期间还想过在服务器装 Emacs，然后用Java和命令行交互，控制 Emacs 帮忙渲染从 Github 拉取过来的 org-mode 源文件，不过没弄好，好在 Github 会渲染 org-mode，索性直接拉取的渲染好的版本。

这次改用 node，发现 mooz 巨巨有写过一个 [[https://github.com/mooz/org-js/][parser]] ，就拿来用了。

** parser issues
- =\n\n= denote a <p> even after a heading
- in ==<code>== / ~~<code>~~ , <code> starting or ending with '/" cannot parse correctly
- ='= 输出 =&#39;= ， ="= 输出 =&#34;=
- no footnote support
- no support for [[https://orgmode.org/manual/Quoting-HTML-tags.html][Quoting HTML tags]]

* TODO SPA
id anchor
[window.]history.pushState(null, null, '') <- do nothing
[window.]history.pushState(null, null, ' ') <- remove hash
[window.]history.replaceState(null, null, ' '); <- remove hash but no history
* view counter | 访问统计
动态博客统计访问量不难，
但是我想让应用 disposable，所以访问量不想储存在服务器
一种方案是定期push到github，但强停应用仍会丢失部分数据
#+BEGIN_EXAMPLE
                 lost data
                   ┌─┴─┐
─────┬──────┬──────┬───x<- break
    push   push   push
#+END_EXAMPLE
既然使用使用google analysis，不如直接用它作view counter
不过：
#+BEGIN_QUOTE
Google doesn't process data instantly, you'd need to subscribe to the realtime analytics and cache
the data to display live on your site. -- [[https://www.quora.com/Can-I-use-Google-Analytics-as-a-public-page-view-counter][Can I use Google Analytics as a public page view
counter? - Quora]]
#+END_QUOTE
#+BEGIN_EXAMPLE
─────┬──────┬──────┬─── Google Analysis
     ↓pull  ↓pull  ↓pull  
     •      •      •    My Server
     └──┐   └────┐
       reqest   request
     └┬─┘   └┬───┘
     delay  delay
#+END_EXAMPLE
* 域名

从 namecheap.com 购入 =nichijou.city= (/Nichijou/ 和 /City/ 都是 [[https://twitter.com/himaraya][あらゐけいいち]] 老师作品)

* URL/Permalink 设计
** TL;DR

采用类似 stackoverflow 的 url 设计

#+BEGIN_EXAMPLE
<domain>/<folder>/<id>[/<title>]
eg: nichijou.city/post/asfq9/blog-redux
#+END_EXAMPLE

title不参与route，以便将来更改

id由创建日期转换而来(转成36进制以缩减长度)

** ID

大多数 practice 直接用文章标题作 URL ， 带来的问题是将来可能会变，所以需要一个不变的ID
用日期做固定ID

medium 某种十六进制编码 d87199a18bed

id采用创建日期

所以 URL 形似： ~nichijou.city/posts/tyvu3v~

当然这种冷冰冰的字符对 SEO 极不友好，故而借鉴 medium.com 的策略， =title + id= ，title 并不影响 routing

最终 URL 形如： ~nichijou.city/posts/robot-from-google-fancy-me-tyvu3v~

stackexchange
=webmasters.stackexchange.com/questions/49781/benefit-of-date-in-url-segments=
id + title, title 不参与route

*** 计数递增
stackoverflow 貌似是渐增的，长度不固定

优点有
- 是能做到最短id的方式
- 不连续的 ID 能 indicate 删除过的文章，不过诱惑不大，我又不会舍得真删文章，顶多 archive
- 酷，嗯，短数字ID确实很酷呢，比如 250bpm.com/blog:138，www.soimort.org/mst/9


位置
✗ nichijou.city/post/set-global-variable-locally-asfq9 混乱
✗ nichijou.city/post/asfq9-set-global-variable-locally 混乱
✓ nichijou.city/post/asfq9/set-global-variable-locally
✓ nichijou.city/post/set-global-variable-locally/asfq9

访问链接 
nichijou.city/post/asfq9[.*]

[[../static/190106233349.png][omission of id in Google Search]]

*** 创建日期

用日期一来可以保证 unique(毕竟只有我一个人在发文，不会出现冲突)，二是创建日期保存在文件名，在内容里就不需再记录该字段了

精确度 小时 一小时内连发大于一篇文章的概率比较小

*** 日期 ID 压缩

** date
文章时效性
结论：文章既然打算常更新，就不应在url里强调创建日期

#+BEGIN_SRC js
// encode
let id = 1812291307
id = id.toString(36).toUpperCase()
console.log(id) // TYZOX7

// decode
id = parseInt(id, 36)
console.log(id) // 1812291307
#+END_SRC

** ref
- ! [[https://indieweb.org/URL_design][URL design - IndieWeb]]
- [[https://searchengineland.com/four-reasons-to-avoid-using-dates-in-urls-13152][Four Reasons To Avoid Using Dates In URLs - Search Engine Land]]
-   [[http://www.seobook.com/do-you-put-dates-your-urls][Do You Put Dates in Your URLs? | SEO Book]]
- [[https://moz.com/community/q/date-in-the-url][Date in the URL | Moz Q&A | Moz]]
- [[https://moz.com/community/q/blog-article-url-with-or-without-date][Blog article URL - with or without date? | Moz Q&A | Moz]]
- [[https://www.searchenginenews.com/sample/content/should-i-remove-the-dates-in-my-blog-urls-yes][Should I Remove the Dates in my Blog URLs? Yes! · SearchEngineNews.com]]
* TODO 标签索引

* 代码高亮

在 [[http://mooz.github.io/org-js/][org.js]] 看到 js 代码有高亮，还以为 org-js 能分析 js 代码块，结果也是在前端挂的 js 库

排查了半天发现 org-js 输出的 html 会把 ='= 替换成 =&#39;= ， ="= 换成 =&#34;= [see: [[https://www.w3.org/MarkUp/html-spec/html-spec_13.html][The HTML Coded Character Set]]]。所以 prism 才会解析出错。
* 图床

网站流量可怜，暂且用 Github，和文章放在一起管理起来方便，文件名不变，将来迁移起来也容易

Hammerspoon 黏图脚本
#+BEGIN_SRC lua
function saveImgToStatic()
  local filename = os.date('%y%m%d%H%M%S') .. '.png'
  local img = hs.pasteboard.readImage()

  if img == nil then return hs.alert('no image on pasteboard') end

  local res = img:saveToFile('/Users/nichijou/Documents/blog/static/' .. filename)

  if not res then
    hs.alert('failed')
  else
    hs.pasteboard.setContents('[[../static/' .. filename .. '][]]')
  end
end
#+END_SRC
